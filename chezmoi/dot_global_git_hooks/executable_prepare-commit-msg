#!/usr/bin/env zsh

# CONFIGURATIONS
LLM_CMD() { uvx --with llm-anthropic llm --model claude-3.7-sonnet "$@"; }

# ANSI color codes for styling the output
RED='\033[0;31m'    # Sets text to red
GREEN='\033[0;32m'  # Sets text to green
YELLOW='\033[0;33m' # Sets text to yellow
BLUE='\033[0;34m'   # Sets text to blue
NC='\033[0m'        # Resets the text color to default, no color

# Check if the commit is a merge commit based on the presence of a second argument
if [ -n "$2" ]; then
  exit 0 # Exit script if it's a merge commit, no custom message needed
fi

# Check if the `uv tool` command is installed
if ! command -v uv &>/dev/null; then
  echo "${RED}Error: 'uv' command is not installed. Please install it and try again.${NC}" >&2
  exit 1
fi

GIT_DIFF=$(git diff -W --cached --minimal -B --find-copies-harder)
RECENT_GIT_COMMITS=$(git log --pretty=format:"%s" -n3 --no-merges)

PROMPT="You are a senior software engineer tasked with writing git commit messages based on git diffs. Your goal is to analyze the provided git diff and the last 5 commit messages and create a concise, informative commit message that accurately represents the changes made.

Here is the git diff you need to analyze:

<git_diff>
$GIT_DIFF
</git_diff>

And the last 5 git commit messages

<recent_git_commits>
$RECENT_GIT_COMMITS
</recent_git_commits>


Please follow these steps to create an appropriate git commit message:

1. Analyze the git diff:
  - Identify the files that have been modified, added, or deleted.
  - Determine the nature of the changes (e.g., bug fixes, new features, refactoring).
  - Look for patterns or themes in the changes.
  - Focus on the most important changes.

2. Analyze the last 5 git commit messages:
  - See if there is any similar patterns or themes in the commit messages.
  - If there is, use that to create a more accurate commit message.

3. Write a commit message adhering to these guidelines:
  - Start with a brief, descriptive summary line (subject line) that is:
    * 100 characters or less
    * Written in the imperative mood (e.g., \"Add feature\" not \"Added feature\")
    * Capitalized
    * Not ended with a period
  - If needed, add a blank line followed by a more detailed body that:
    * Explains what and why, not how
    * Uses bullet points (starting with hyphens) for multiple points
  - Omit the body if the change is simple and the subject line sufficiently describes it

4. Present your final commit message wrapped in <output> tags.


Before writing the final commit message, wrap your analysis in <analysis> tag. In this analysis:
a. List all modified files
b. Categorize changes (e.g., feature addition, bug fix, refactoring)
c. Identify the most significant changes
d. Note any patterns or themes
e. Draft 2-3 potential subject lines and evaluate them based on the guidelines
f. Decide whether a body is necessary and explain why

Here's an example of the desired output format (note that this is a generic example and your commit message should be specific to the provided git diff):

\`\`\`
<analysis>
Your analysis
</analysis>
<output>
Implement user authentication system

- Add login and registration endpoints
- Create user model and database schema
- Integrate JWT for secure token management
- Set up password hashing and salting
</output>
\`\`\`

Now, please analyze the provided git diff and create an appropriate commit message following the guidelines above."

# Generate the commit message using `git diff` piped into `llm` command
# The LLM command takes a system prompt from a file as input
if ! xml_output=$(LLM_CMD "$PROMPT"); then
  # Finalizing output
  tput cnorm   # Show the cursor again
  printf "\\n" # Move the cursor to the next line

  printf "${RED}Error: 'llm' command failed to generate the commit message:\\n${commit_msg}${NC}\\n\\nManually set the commit message"
  exit 1
fi

echo "$xml_output"
# Extract the analysis and commit message from the XML output
analysis=$(echo "$xml_output" | uvx strip-tags 'analysis')
commit_msg=$(echo "$xml_output" | uvx strip-tags 'output')

# Finalizing output
tput cnorm # Show the cursor again
echo       # Move the cursor to the next line

# Display the analysis with color-coded headings
echo "${BLUE}=== Commit Analysis ===${NC}"
echo "${YELLOW}$analysis${NC}"
echo "${BLUE}========================${NC}"
echo

# Display the generated commit message with color-coded headings
echo "${BLUE}=== Generated Commit Message ===${NC}"
echo "${GREEN}$commit_msg${NC}"
echo "${BLUE}=================================${NC}"
echo

# Format the analysis with '% ' prefix for each line
formatted_analysis=$(echo "$analysis" | sed 's/^/% /')

# Output both the formatted analysis and the commit message
{
  echo "$formatted_analysis"
  echo
  echo "$commit_msg"
} >"$1"
