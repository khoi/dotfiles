#!/usr/bin/env zsh

# ANSI color codes for styling the output
RED='\033[0;31m'    # Sets text to red
GREEN='\033[0;32m'  # Sets text to green
YELLOW='\033[0;33m' # Sets text to yellow
BLUE='\033[0;34m'   # Sets text to blue
NC='\033[0m'        # Resets the text color to default, no color

# Check if LLM_MODEL environment variable is set
if [ -z "$COMMIT_HOOK_LLM_MODEL" ]; then
  echo "${RED}Error: COMMIT_HOOK_LLM_MODEL environment variable is not set. Please set it and try again.${NC}" >&2
  exit 0
fi

# Check if the commit is a merge commit based on the presence of a second argument
if [ -n "$2" ]; then
  exit 0 # Exit script if it's a merge commit, no custom message needed
fi

# Check if the `uv tool` command is installed
if ! command -v uv &>/dev/null; then
  echo "${RED}Error: 'uv' command is not installed. Please install it and try again.${NC}" >&2
  exit 1
fi

# Check if the llm tool is installed
if ! uv tool list | grep -q llm; then
  echo "${YELLOW}Installing llm tool...${NC}" >&2
  if ! uv tool install llm; then
    echo "${RED}Error: Failed to install 'llm' tool. Please install it manually and try again.${NC}" >&2
    exit 1
  fi
  echo "${GREEN}Successfully installed llm tool.${NC}" >&2

  echo "${YELLOW}Installing llm-anthropic model...${NC}" >&2
  if ! uv tool run llm install llm-anthropic; then
    echo "${RED}Error: Failed to install 'llm-anthropic' model. Please install it manually and try again.${NC}" >&2
    exit 1
  fi
  echo "${GREEN}Successfully installed llm-anthropic model.${NC}" >&2
fi

# Generate the commit message using `git diff` piped into `llm` command
# The LLM command takes a system prompt from a file as input
if ! xml_output=$(git diff -W --cached --minimal -B --find-copies-harder | uvx llm -t gitcommit -o thinking 1 | tee /dev/tty); then
  # Finalizing output
  tput cnorm   # Show the cursor again
  printf "\\n" # Move the cursor to the next line

  printf "${RED}Error: 'llm' command failed to generate the commit message:\\n${commit_msg}${NC}\\n\\nManually set the commit message"
  exit 1
fi

echo "$xml_output"
# Extract the analysis and commit message from the XML output
analysis=$(echo "$xml_output" | xq -q 'analysis')
commit_msg=$(echo "$xml_output" | xq -q 'output')

# Finalizing output
tput cnorm # Show the cursor again
echo       # Move the cursor to the next line

# Display the analysis with color-coded headings
echo "${BLUE}=== Commit Analysis ===${NC}"
echo "${YELLOW}$analysis${NC}"
echo "${BLUE}========================${NC}"
echo

# Display the generated commit message with color-coded headings
echo "${BLUE}=== Generated Commit Message ===${NC}"
echo "${GREEN}$commit_msg${NC}"
echo "${BLUE}=================================${NC}"
echo

# Format the analysis with '% ' prefix for each line
formatted_analysis=$(echo "$analysis" | sed 's/^/% /')

# Output both the formatted analysis and the commit message
{
  echo "$formatted_analysis"
  echo
  echo "$commit_msg"
} >"$1"
